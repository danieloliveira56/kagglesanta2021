import subprocess
import itertools
import numpy as np

SUPERPERMUTATIONS = {
    4: "123412314231243121342132413214321",
    5: "123451234152341253412354123145231425314235142315423124531243512431524312543121345213425134215342135421324513241532413524132541321453214352143251432154321",
    6: "12345612345162345126345123645132645136245136425136452136451234651234156234152634152364152346152341652341256341253641253461253416253412653412356412354612354162354126354123654132654312645316243516243156243165243162543162453164253146253142653142563142536142531645231465231456231452631452361452316453216453126435126431526431256432156423154623154263154236154231654231564213564215362415362145362154362153462135462134562134652134625134621536421563421653421635421634521634251634215643251643256143256413256431265432165432615342613542613452613425613426513426153246513246531246351246315246312546321546325146325416325461325463124563214563241563245163245613245631246532146532416532461532641532614532615432651436251436521435621435261435216435214635214365124361524361254361245361243561243651423561423516423514623514263514236514326541362541365241356241352641352461352416352413654213654123",

}
SPECIAL_CHARS = {
    4: (2, 1),
    5: (3, 2),
    6: (4, 5),
    7: (5, 4),
}
REPLACE_DICT = {
 '5': 'üéÖ',
 '4': 'ü§∂',
 '8': 'üåü',
 '1': 'ü¶å',
 '2': 'üßù',
 '3': 'üéÑ',
 '6': 'üéÅ',
 '7': 'üéÄ'}


def word_is_contained(word, string_container):
    missing = word not in string_container
    if missing and "*" in string_container:
        for i in range(len(word) - 1):
            if word[:i] + "*" + word[i + 1:] in string_container:
                missing = False
                break
        if word[:-1] + "*" in string_container:
            missing = False
    return not missing

def get_words(num_letters=7):
    words = []
    for k in range(len(SUPERPERMUTATIONS[num_letters]) - (num_letters-1)):
        s = SUPERPERMUTATIONS[num_letters][k:k + num_letters]
        if (is_perm(s)) & (s not in words):
            words.append(s)
    return words


def hamming_distance(str1, str2):
    return sum((c1!=c2) for c1, c2 in zip(str1, str2))


def offset(s1, s2):
    assert(len(s1) == len(s2))
    ln = len(s1)
    j = ln
    for k in range(0, ln):
        if hamming_distance(s1[k:], s2[:7-k]) == 0:
            j = k
            break
    return j


def get_tsp_solution(group):
    # CREATE DISTANCE MATRIX
    SIZE = len(group)
    M = np.zeros((SIZE, SIZE), dtype='int8')
    for j in range(SIZE):
        # if j%25==0: print(j,', ',end='')
        for k in range(SIZE):
            M[j, k] = offset(group[j], group[k])

    # WRITE PROBLEM FILE
    f = open(f'group.par', 'w')
    f.write("PROBLEM_FILE = distances.atsp\n")
    f.write("TOUR_FILE = output.txt\n")
    f.write(f"OPTIMUM = {SIZE}\n")
    f.write("MOVE_TYPE = 5\n")
    f.write("PATCHING_C = 3\n")
    f.write("PATCHING_A = 2\n")
    f.write("RUNS = 1\n")
    f.write("TIME_LIMIT = 120\n")  # seconds
    f.close()

    # WRITE PARAMETER FILE
    f = open(f'distances.atsp', 'w')
    f.write("NAME: distances\n")
    f.write("TYPE: ATSP\n")
    f.write("COMMENT: Asymmetric TSP\n")
    f.write(f"DIMENSION: {SIZE}\n")
    f.write("EDGE_WEIGHT_TYPE: EXPLICIT\n")
    f.write("EDGE_WEIGHT_FORMAT: FULL_MATRIX\n")
    f.write("EDGE_WEIGHT_SECTION\n")
    for j in range(SIZE):
        # if j%25==0: print(j,', ',end='')
        for k in range(SIZE):
            f.write(f"{M[j, k]:2d} ")
        f.write("\n")
    f.close()

    # EXECUTE TSP SOLVER
    subprocess.run(
        [
            './LKH',
            'group.par',
        ],
        stdout=subprocess.DEVNULL
    )

    # READ RESULTING ORDER
    with open('output.txt') as f:
        lines = f.readlines()
    for i, ln in enumerate(lines):
        if 'TOUR_SECTION' in ln: break
    perms = [int(x[:-1]) for x in lines[i + 1:-2]]

    # CREATE STRING
    result = group[perms[0] - 1]
    for k in range(1, len(perms)):
        s1 = group[perms[k - 1] - 1]
        s2 = group[perms[k] - 1]
        d = offset(s1, s2)
        assert (d != 0)
        result += s2[-d:]

    return result


def is_perm(s):
    num_letters = len(s)
    y = True
    for k in range(1, num_letters+1):
        y = y & (str(k) in s)
        if not y:
            break
    return y


def fact(n):
    if n == 1:
        return 1
    else:
        return n * fact(n-1)


def map_solution(words, solution):
    num_letters = len(words[0])
    word_map = {
        w: [] for w in words
    }
    # Words that can be found at each position
    position_map = {
        i: None for i in range(len(solution))
    }

    for i in range(len(solution) - num_letters):
        words = get_words_in_string(num_letters, solution[i:i + num_letters])
        for w in words:
            if w not in word_map:
                word_map[w] = []
            word_map[w].append(i)
            position_map[i] = w
    return word_map, position_map


def get_words_in_string(num_letters, string1):

    word_list = set()
    for i in range(len(string1) - num_letters + 1):
        w = string1[i:i + num_letters]

        for p in range(num_letters-1, 0, -1):
            if "*" * p in w:
                existing_letters = [int(c) for c in w if c != '*']
                letters = [letter for letter in list(range(1, num_letters + 1)) if letter not in existing_letters]
                for x in itertools.permutations(letters):
                    new_w = w.replace("*" * p, "".join(map(str, list(x))))
                    if not is_perm(new_w):
                        continue
                    word_list.add(new_w)
                break
            if not is_perm(w):
                continue
            word_list.add(w)

    return list(word_list)


def check_word_count(num_letters, string1, string2):

    return len(get_words_in_string(num_letters, string1)) == len(get_words_in_string(num_letters, string2))